#convert(date, ...) converts DueDate from datetime to date, which gets rid of the 00:00:00 after each date
#selects work center if job is at CoZ, selects vendcode if job is at vendor
#returns PO Comments, then PO Job Comments if PO Comments are null or length=0. 
def getJobsInProgress(cursor):
	cursor.execute("SELECT Estim.DrawingFileName, Orders.CustCode, Orders.PONum, OrderDet.JobNo, OrderDet.PartNo, OrderDet.QtyToMake, CONVERT(date, OrderDet.DueDate) AS DueDate, ISNULL(OrderRouting.WorkCntr, OrderRouting.VendCode) AS Location, ISNULL(OrderRouting.OperCode, '') AS OperCode, Orders.SalesID, ISNULL((SELECT CASE WHEN (POReleases.Comments IS NOT NULL AND DATALENGTH(POReleases.Comments)>0) THEN cast(POReleases.Comments as nvarchar(max)) + cast('; ' as nvarchar(2)) ELSE PO.User_Text1 END FROM POReleases JOIN PO ON POReleases.PONum=PO.PONum WHERE POReleases.JobNo = OrderDet.JobNo AND (POReleases.DateReceived IS NULL OR POReleases.DateReceived='') FOR XML PATH('')), '') AS POComments, OrderDet.User_Text1 AS JobComments, Orders.User_Text1 AS OrderComments FROM OrderDet LEFT JOIN OrderRouting ON OrderDet.JobNo = OrderRouting.JobNo LEFT JOIN Orders ON OrderDet.OrderNo=Orders.OrderNo LEFT JOIN Estim ON OrderDet.PartNo=Estim.PartNo WHERE OrderRouting.Status='Current' AND OrderDet.Status!='Closed' AND (OrderDet.DateFinished IS NULL OR OrderDet.DateFinished='') ORDER BY OrderRouting.JobNo")
	return cursor.fetchall()

#Late: jobs that are their due date from OrderDet
#convert(date, getdate()) gets rid of the current time from the date. Without this, a job with due date 8/23 would incorrectly be considered late on 8/23 12:53:08 because of the hours and seconds. 
def getJobsLate(cursor): 
	cursor.execute("SELECT Estim.DrawingFileName, Orders.CustCode, Orders.PONum, OrderDet.JobNo, OrderDet.PartNo, OrderDet.QtyToMake, CONVERT(date, OrderDet.DueDate) AS DueDate, ISNULL(OrderRouting.WorkCntr, OrderRouting.VendCode) AS Location, ISNULL(OrderRouting.OperCode, '') AS OperCode, Orders.SalesID, ISNULL((SELECT CASE WHEN (POReleases.Comments IS NOT NULL AND DATALENGTH(POReleases.Comments)>0) THEN cast(POReleases.Comments as nvarchar(max)) + cast('; ' as nvarchar(2)) ELSE PO.User_Text1 END FROM POReleases JOIN PO ON POReleases.PONum=PO.PONum WHERE POReleases.JobNo = OrderDet.JobNo AND (POReleases.DateReceived IS NULL OR POReleases.DateReceived='') FOR XML PATH('')), '') AS POComments, OrderDet.User_Text1 AS JobComments, Orders.User_Text1 AS OrderComments FROM OrderDet LEFT JOIN Estim ON OrderDet.PartNo=Estim.PartNo JOIN OrderRouting ON OrderDet.JobNo = OrderRouting.JobNo JOIN Orders ON OrderDet.OrderNo=Orders.OrderNo WHERE OrderRouting.Status='Current' AND OrderDet.Status!='Closed' AND (OrderDet.DateFinished IS NULL OR OrderDet.DateFinished='') AND convert(date, OrderDet.Duedate)<convert(date, GETDATE()) ORDER BY OrderDet.DueDate")
	return cursor.fetchall()

#Behind schedule: uses the scheduled start and end from Estim to determine whether a job is on schedule or not.
def getJobsBehindSchedule(cursor): 
	cursor.execute("SELECT Estim.DrawingFileName, Orders.CustCode, Orders.PONum, OrderRouting.JobNo, OrderDet.PartNo, OrderDet.QtyToMake, convert(date, OrderDet.DueDate) AS DueDate, ISNULL(OrderRouting.WorkCntr, OrderRouting.VendCode) AS Location, ISNULL(OrderRouting.OperCode, '') AS OperCode, OrderRouting.EstimStartDate, OrderRouting.ActualStartDate, Orders.SalesID, ISNULL((SELECT CASE WHEN (POReleases.Comments IS NOT NULL AND DATALENGTH(POReleases.Comments)>0) THEN cast(POReleases.Comments as nvarchar(max)) + cast('; ' as nvarchar(2)) ELSE PO.User_Text1 END FROM POReleases JOIN PO ON POReleases.PONum=PO.PONum LEFT JOIN Estim ON OrderDet.PartNo=Estim.PartNo WHERE POReleases.JobNo = OrderDet.JobNo AND (POReleases.DateReceived IS NULL OR POReleases.DateReceived='') FOR XML PATH('')), '') AS POComments, OrderDet.User_Text1 AS JobComments, Orders.User_Text1 AS OrderComments FROM OrderRouting JOIN OrderDet ON OrderRouting.JobNo=OrderDet.JobNo JOIN Orders ON Orders.OrderNo=OrderDet.OrderNo LEFT JOIN Estim ON Estim.PartNo=OrderDet.PartNo WHERE (OrderRouting.Status = 'Current') AND OrderRouting.JobNo IN (SELECT JobNo FROM OrderDet WHERE Status = 'Open' AND JobNo IS NOT NULL AND JobNo <> '') AND ((OrderRouting.ActualStartDate IS NULL AND OrderRouting.EstimStartDate < GETDATE() OR (OrderRouting.ActualEndDate IS NULL AND OrderRouting.EstimEndDate IS NOT NULL AND GETDATE() > OrderRouting.EstimEndDate))) ORDER BY OrderRouting.JobNo")
	return cursor.fetchall()

#Work center = Assembly
def getAssembliesLate(cursor):
	cursor.execute("SELECT Estim.DrawingFileName, Orders.CustCode, Orders.PONum, OrderDet.JobNo, OrderDet.PartNo, OrderDet.QtyToMake, convert(date, OrderDet.DueDate) AS DueDate, ISNULL(OrderRouting.WorkCntr, OrderRouting.VendCode) AS Location, ISNULL(OrderRouting.OperCode, '') AS OperCode, Orders.SalesID, ISNULL((SELECT CASE WHEN (POReleases.Comments IS NOT NULL AND DATALENGTH(POReleases.Comments)>0) THEN cast(POReleases.Comments as nvarchar(max)) + cast('; ' as nvarchar(2)) ELSE PO.User_Text1 END FROM POReleases JOIN PO ON POReleases.PONum=PO.PONum WHERE POReleases.JobNo = OrderDet.JobNo AND (POReleases.DateReceived IS NULL OR POReleases.DateReceived='') FOR XML PATH('')), '') AS POComments, OrderDet.User_Text1 AS JobComments, Orders.User_Text1 AS OrderComments FROM OrderDet JOIN OrderRouting ON OrderDet.JobNo = OrderRouting.JobNo LEFT JOIN Estim ON OrderDet.PartNo=Estim.PartNo JOIN Orders ON OrderDet.OrderNo=Orders.OrderNo WHERE OrderRouting.Status='Current' AND OrderDet.Status!='Closed' AND (OrderDet.DateFinished IS NULL OR OrderDet.DateFinished='') AND OrderRouting.WorkCntr='ASSEMBLY' AND convert(date, OrderDet.Duedate) <convert(date, GETDATE()) ORDER BY OrderDet.DueDate")
	return cursor.fetchall()

def getAssembliesBehindSchedule(cursor):
	cursor.execute("SELECT Estim.DrawingFileName, Orders.CustCode, Orders.PONum, OrderRouting.JobNo, OrderDet.PartNo, OrderDet.QtyToMake, convert(date, OrderDet.DueDate) AS DueDate, ISNULL(OrderRouting.WorkCntr, OrderRouting.VendCode) AS Location, ISNULL(OrderRouting.OperCode, '') AS OperCode, OrderRouting.EstimStartDate, OrderRouting.ActualStartDate, Orders.SalesID, ISNULL((SELECT CASE WHEN (POReleases.Comments IS NOT NULL AND DATALENGTH(POReleases.Comments)>0) THEN cast(POReleases.Comments as nvarchar(max)) + cast('; ' as nvarchar(2)) ELSE PO.User_Text1 END FROM POReleases JOIN PO ON POReleases.PONum=PO.PONum WHERE POReleases.JobNo = OrderDet.JobNo AND (POReleases.DateReceived IS NULL OR POReleases.DateReceived='') FOR XML PATH('')), '') AS POComments, OrderDet.User_Text1 AS JobComments, Orders.User_Text1 AS OrderComments FROM OrderRouting JOIN OrderDet ON OrderRouting.JobNo=OrderDet.JobNo JOIN Orders ON Orders.OrderNo=OrderDet.OrderNo LEFT JOIN Estim ON Estim.PartNo=OrderDet.PartNo WHERE (OrderRouting.Status = 'Current') AND OrderRouting.JobNo IN (SELECT JobNo FROM OrderDet WHERE Status = 'Open' AND JobNo IS NOT NULL AND JobNo <> '') AND ((OrderRouting.ActualStartDate IS NULL AND OrderRouting.EstimStartDate < GETDATE() OR (OrderRouting.ActualEndDate IS NULL AND OrderRouting.EstimEndDate IS NOT NULL AND GETDATE() > OrderRouting.EstimEndDate))) AND OrderRouting.WorkCntr='ASSEMBLY' ORDER BY OrderRouting.JobNo")
	return cursor.fetchall()

def getJobsDueToday(cursor):
	cursor.execute("SELECT Estim.DrawingFileName, Orders.CustCode, Orders.PONum, OrderDet.JobNo, OrderDet.PartNo, OrderDet.QtyToMake, convert(date, OrderDet.DueDate) AS DueDate, ISNULL(OrderRouting.WorkCntr, OrderRouting.VendCode) AS Location, ISNULL(OrderRouting.OperCode, '') AS OperCode, Orders.SalesID, ISNULL((SELECT CASE WHEN (POReleases.Comments IS NOT NULL AND DATALENGTH(POReleases.Comments)>0) THEN cast(POReleases.Comments as nvarchar(max)) + cast('; ' as nvarchar(2)) ELSE PO.User_Text1 END FROM POReleases JOIN PO ON POReleases.PONum=PO.PONum WHERE POReleases.JobNo = OrderDet.JobNo AND (POReleases.DateReceived IS NULL OR POReleases.DateReceived='') FOR XML PATH('')), '') AS POComments, OrderDet.User_Text1 AS JobComments, Orders.User_Text1 AS OrderComments FROM OrderDet JOIN OrderRouting ON OrderDet.JobNo = OrderRouting.JobNo LEFT JOIN Estim ON OrderDet.PartNo=Estim.PartNo JOIN Orders ON OrderDet.OrderNo=Orders.OrderNo WHERE OrderRouting.Status='Current' AND OrderDet.Status!='Closed' AND (OrderDet.DateFinished IS NULL OR OrderDet.DateFinished='') AND convert(date, OrderDet.Duedate)=convert(date, GETDATE())")
	return cursor.fetchall()
	
def getJobsDueTomorrow(cursor):
	cursor.execute("SELECT Estim.DrawingFileName, Orders.CustCode, Orders.PONum, OrderDet.JobNo, OrderDet.PartNo, OrderDet.QtyToMake, convert(date, OrderDet.DueDate) AS DueDate, ISNULL(OrderRouting.WorkCntr, OrderRouting.VendCode) AS Location, ISNULL(OrderRouting.OperCode, '') AS OperCode, Orders.SalesID, ISNULL((SELECT CASE WHEN (POReleases.Comments IS NOT NULL AND DATALENGTH(POReleases.Comments)>0) THEN cast(POReleases.Comments as nvarchar(max)) + cast('; ' as nvarchar(2)) ELSE PO.User_Text1 END FROM POReleases JOIN PO ON POReleases.PONum=PO.PONum WHERE POReleases.JobNo = OrderDet.JobNo AND (POReleases.DateReceived IS NULL OR POReleases.DateReceived='') FOR XML PATH('')), '') AS POComments, OrderDet.User_Text1 AS JobComments, Orders.User_Text1 AS OrderComments FROM OrderDet JOIN OrderRouting ON OrderDet.JobNo = OrderRouting.JobNo LEFT JOIN Estim ON OrderDet.PartNo=Estim.PartNo JOIN Orders ON OrderDet.OrderNo=Orders.OrderNo WHERE OrderRouting.Status='Current' AND OrderDet.Status!='Closed' AND (OrderDet.DateFinished IS NULL OR OrderDet.DateFinished='') AND convert(date, OrderDet.Duedate)=dateadd(day, 1, convert(date, GETDATE()))")
	return cursor.fetchall()

def getJobsDueThisWeek(cursor):
	cursor.execute("SELECT Estim.DrawingFileName, Orders.CustCode, Orders.PONum, OrderDet.JobNo, OrderDet.PartNo, OrderDet.QtyToMake, convert(date, OrderDet.DueDate) AS DueDate, ISNULL(OrderRouting.WorkCntr, OrderRouting.VendCode) AS Location, ISNULL(OrderRouting.OperCode, '') AS OperCode, Orders.SalesID, ISNULL((SELECT CASE WHEN (POReleases.Comments IS NOT NULL AND DATALENGTH(POReleases.Comments)>0) THEN cast(POReleases.Comments as nvarchar(max)) + cast('; ' as nvarchar(2)) ELSE PO.User_Text1 END FROM POReleases JOIN PO ON POReleases.PONum=PO.PONum WHERE POReleases.JobNo = OrderDet.JobNo AND (POReleases.DateReceived IS NULL OR POReleases.DateReceived='') FOR XML PATH('')), '') AS POComments, OrderDet.User_Text1 AS JobComments, Orders.User_Text1 AS OrderComments FROM OrderDet JOIN OrderRouting ON OrderDet.JobNo = OrderRouting.JobNo LEFT JOIN Estim ON OrderDet.PartNo=Estim.PartNo JOIN Orders ON OrderDet.OrderNo=Orders.OrderNo WHERE OrderRouting.Status='Current' AND OrderDet.Status!='Closed' AND (OrderDet.DateFinished IS NULL OR OrderDet.DateFinished='') AND convert(date, OrderDet.Duedate)<=dateadd(week, 1, convert(date, GETDATE())) AND OrderDet.DueDate>=GETDATE()")
	return cursor.fetchall()

def getJobSteps(cursor, JobNo):
	cursor.execute("SELECT Estim.DrawingFileName, OrderRouting.JobNo, OrderRouting.PartNo, OrderRouting.StepNo, ISNULL(OrderRouting.WorkCntr, OrderRouting.VendCode) AS Location, ISNULL(OrderRouting.OperCode, '') AS OperCode, OrderRouting.Descrip, OrderRouting.EstimStartDate, OrderRouting.EstimEndDate, OrderRouting.ActualStartDate, OrderRouting.ActualEndDate, OrderRouting.Status FROM OrderRouting LEFT JOIN Estim ON OrderRouting.PartNo=Estim.PartNo WHERE JobNo=? ORDER BY StepNo", (JobNo))
	return cursor.fetchall()

#def getJobStats(cursor, JobNo):
